#!/usr/bin/env zsh

# Creates a local SSH key, adds it to the macOS keychain if appropriate,
#  and offers to upload it to a remote host.
ssh_make_key() {
  if [[ -n $1 ]]; then
    keyname=$1
  else
    echo -n "Enter name for new key: "
    read keyname
  fi

  email="shane@techie.net"
  byteSize=4096
  keyPath=$HOME/.ssh

  privateKey=$keyPath/${keyname}_rsa
  if [[ -a $privateKey ]]; then
    echo "$privateKey already exists." >&2
    return 1
  fi

  finished=0
  echo "GENERATING SSH KEY FOR $keyname"
  while [[ $finished -eq 0 ]]; do
    echo -n "  Passphrase: "
    read -s pass1
    echo
    echo -n "  Confirm passphrase: "
    read -s pass2
    echo
    if [[ $pass1 != $pass2 ]]; then
      echo "Passphrases don't match. Try again!" >&2
      continue
    fi
    if [[ ${#pass1} -lt 5 ]]; then
      echo "Passphrase is too short. Try again!" >&2
      continue
    fi
    finished=1
  done

  ssh-keygen -t rsa -b $byteSize -C $email -N $pass1 -f $privateKey

  if [[ $OSTYPE == darwin* ]]; then
    if type expect > /dev/null; then
        expect -c "spawn ssh-add -K $privateKey
                   expect \"Enter passphrase for $privateKey:\" {
                     send \"$pass1\n\"
                     interact
                   }"
    else
        echo "Key is made, but we need its passphrase once more to add it to the keychain."
        ssh-add -K $privateKey
    fi
  fi

  echo "Map this key to a specific domain?"
  echo "(Leave blank to keep it generic.)"
  echo -n "Target domain: "
  read domainTarget
  if [[ -n $domainTarget ]]; then
    # TODO: https://www.ssh.com/ssh/copy-id
    echo "Upload key to server?"
    echo "(Leave blank to skip upload.)"
    echo -n "Username: "
    read userNameTarget
    if [[ -n $userNameTarget ]]; then
      cat ${privateKey}.pub | ssh $userNameTarget@$domainTarget -o PasswordAuthentication=yes -o PubkeyAuthentication=no 'mkdir -p .ssh; cat >> .ssh/authorized_keys2'
    fi

    lineBreak=$(grep -n "####" $HOME/.ssh/config | cut -f1 -d:)
    lineBreak=$(expr $lineBreak - 1)
    prefile=$(head -$lineBreak $HOME/.ssh/config)
    echo "$prefile" > $HOME/.ssh/config # overwriting old file
    echo "" >> $HOME/.ssh/config

    echo "Host $domainTarget" >> $HOME/.ssh/config
    echo "  IdentityFile $privateKey" >> $HOME/.ssh/config
    echo "  IdentitiesOnly yes" >> $HOME/.ssh/config
    echo "  PubkeyAuthentication yes" >> $HOME/.ssh/config
    echo "  PasswordAuthentication no" >> $HOME/.ssh/config
    echo "  Port 22" >> $HOME/.ssh/config
    echo "" >> $HOME/.ssh/config

    cat $HOME/.dotfiles/resources/ssh_config.base >> $HOME/.ssh/config
    echo "" >> $HOME/.ssh/config
  fi

  echo "All done!"

  if [[ $OSTYPE == darwin* ]]; then
    cat ${privateKey}.pub | pbcopy
    echo "(Public key is in your clipboard.)"
  fi
}
